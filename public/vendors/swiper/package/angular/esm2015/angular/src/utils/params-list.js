/* underscore in name -> watch for changes */
export const paramsList = [
    'init',
    '_direction',
    'touchEventsTarget',
    'initialSlide',
    '_speed',
    'cssMode',
    'updateOnWindowResize',
    'nested',
    '_width',
    '_height',
    'preventInteractionOnTransition',
    'userAgent',
    'url',
    '_edgeSwipeDetection',
    '_edgeSwipeThreshold',
    '_freeMode',
    '_freeModeMomentum',
    '_freeModeMomentumRatio',
    '_freeModeMomentumBounce',
    '_freeModeMomentumBounceRatio',
    '_freeModeMomentumVelocityRatio',
    '_freeModeSticky',
    '_freeModeMinimumVelocity',
    '_autoHeight',
    'setWrapperSize',
    'virtualTranslate',
    '_effect',
    'breakpoints',
    '_spaceBetween',
    '_slidesPerView',
    '_slidesPerColumn',
    '_slidesPerColumnFill',
    '_slidesPerGroup',
    '_slidesPerGroupSkip',
    '_centeredSlides',
    '_centeredSlidesBounds',
    '_slidesOffsetBefore',
    '_slidesOffsetAfter',
    'normalizeSlideIndex',
    '_centerInsufficientSlides',
    '_watchOverflow',
    'roundLengths',
    'touchRatio',
    'touchAngle',
    'simulateTouch',
    '_shortSwipes',
    '_longSwipes',
    'longSwipesRatio',
    'longSwipesMs',
    '_followFinger',
    'allowTouchMove',
    '_threshold',
    'touchMoveStopPropagation',
    'touchStartPreventDefault',
    'touchStartForcePreventDefault',
    'touchReleaseOnEdges',
    'uniqueNavElements',
    '_resistance',
    '_resistanceRatio',
    '_watchSlidesProgress',
    '_watchSlidesVisibility',
    '_grabCursor',
    'preventClicks',
    'preventClicksPropagation',
    '_slideToClickedSlide',
    '_preloadImages',
    'updateOnImagesReady',
    '_loop',
    '_loopAdditionalSlides',
    '_loopedSlides',
    '_loopFillGroupWithBlank',
    'loopPreventsSlide',
    '_allowSlidePrev',
    '_allowSlideNext',
    '_swipeHandler',
    '_noSwiping',
    'noSwipingClass',
    'noSwipingSelector',
    'passiveListeners',
    'containerModifierClass',
    'slideClass',
    'slideBlankClass',
    'slideActiveClass',
    'slideDuplicateActiveClass',
    'slideVisibleClass',
    'slideDuplicateClass',
    'slideNextClass',
    'slideDuplicateNextClass',
    'slidePrevClass',
    'slideDuplicatePrevClass',
    'wrapperClass',
    'runCallbacksOnInit',
    // modules
    'a11y',
    'autoplay',
    '_controller',
    'coverflowEffect',
    'cubeEffect',
    'fadeEffect',
    'flipEffect',
    'hashNavigation',
    'history',
    'keyboard',
    'lazy',
    'mousewheel',
    '_navigation',
    '_pagination',
    'parallax',
    '_scrollbar',
    '_thumbs',
    'virtual',
    'zoom',
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW1zLWxpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYW5ndWxhci9zcmMvdXRpbHMvcGFyYW1zLWxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkNBQTZDO0FBQzdDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRztJQUN4QixNQUFNO0lBQ04sWUFBWTtJQUNaLG1CQUFtQjtJQUNuQixjQUFjO0lBQ2QsUUFBUTtJQUNSLFNBQVM7SUFDVCxzQkFBc0I7SUFDdEIsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsZ0NBQWdDO0lBQ2hDLFdBQVc7SUFDWCxLQUFLO0lBQ0wscUJBQXFCO0lBQ3JCLHFCQUFxQjtJQUNyQixXQUFXO0lBQ1gsbUJBQW1CO0lBQ25CLHdCQUF3QjtJQUN4Qix5QkFBeUI7SUFDekIsOEJBQThCO0lBQzlCLGdDQUFnQztJQUNoQyxpQkFBaUI7SUFDakIsMEJBQTBCO0lBQzFCLGFBQWE7SUFDYixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLFNBQVM7SUFDVCxhQUFhO0lBQ2IsZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLGlCQUFpQjtJQUNqQixxQkFBcUI7SUFDckIsaUJBQWlCO0lBQ2pCLHVCQUF1QjtJQUN2QixxQkFBcUI7SUFDckIsb0JBQW9CO0lBQ3BCLHFCQUFxQjtJQUNyQiwyQkFBMkI7SUFDM0IsZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxZQUFZO0lBQ1osWUFBWTtJQUNaLGVBQWU7SUFDZixjQUFjO0lBQ2QsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2QsZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osMEJBQTBCO0lBQzFCLDBCQUEwQjtJQUMxQiwrQkFBK0I7SUFDL0IscUJBQXFCO0lBQ3JCLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0Qix3QkFBd0I7SUFDeEIsYUFBYTtJQUNiLGVBQWU7SUFDZiwwQkFBMEI7SUFDMUIsc0JBQXNCO0lBQ3RCLGdCQUFnQjtJQUNoQixxQkFBcUI7SUFDckIsT0FBTztJQUNQLHVCQUF1QjtJQUN2QixlQUFlO0lBQ2YseUJBQXlCO0lBQ3pCLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsd0JBQXdCO0lBQ3hCLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLDJCQUEyQjtJQUMzQixtQkFBbUI7SUFDbkIscUJBQXFCO0lBQ3JCLGdCQUFnQjtJQUNoQix5QkFBeUI7SUFDekIsZ0JBQWdCO0lBQ2hCLHlCQUF5QjtJQUN6QixjQUFjO0lBQ2Qsb0JBQW9CO0lBRXBCLFVBQVU7SUFDVixNQUFNO0lBQ04sVUFBVTtJQUNWLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsWUFBWTtJQUNaLFlBQVk7SUFDWixZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxVQUFVO0lBQ1YsTUFBTTtJQUNOLFlBQVk7SUFDWixhQUFhO0lBQ2IsYUFBYTtJQUNiLFVBQVU7SUFDVixZQUFZO0lBQ1osU0FBUztJQUNULFNBQVM7SUFDVCxNQUFNO0NBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHVuZGVyc2NvcmUgaW4gbmFtZSAtPiB3YXRjaCBmb3IgY2hhbmdlcyAqL1xuZXhwb3J0IGNvbnN0IHBhcmFtc0xpc3QgPSBbXG4gICdpbml0JyxcbiAgJ19kaXJlY3Rpb24nLFxuICAndG91Y2hFdmVudHNUYXJnZXQnLFxuICAnaW5pdGlhbFNsaWRlJyxcbiAgJ19zcGVlZCcsXG4gICdjc3NNb2RlJyxcbiAgJ3VwZGF0ZU9uV2luZG93UmVzaXplJyxcbiAgJ25lc3RlZCcsXG4gICdfd2lkdGgnLFxuICAnX2hlaWdodCcsXG4gICdwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24nLFxuICAndXNlckFnZW50JyxcbiAgJ3VybCcsXG4gICdfZWRnZVN3aXBlRGV0ZWN0aW9uJyxcbiAgJ19lZGdlU3dpcGVUaHJlc2hvbGQnLFxuICAnX2ZyZWVNb2RlJyxcbiAgJ19mcmVlTW9kZU1vbWVudHVtJyxcbiAgJ19mcmVlTW9kZU1vbWVudHVtUmF0aW8nLFxuICAnX2ZyZWVNb2RlTW9tZW50dW1Cb3VuY2UnLFxuICAnX2ZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbycsXG4gICdfZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW8nLFxuICAnX2ZyZWVNb2RlU3RpY2t5JyxcbiAgJ19mcmVlTW9kZU1pbmltdW1WZWxvY2l0eScsXG4gICdfYXV0b0hlaWdodCcsXG4gICdzZXRXcmFwcGVyU2l6ZScsXG4gICd2aXJ0dWFsVHJhbnNsYXRlJyxcbiAgJ19lZmZlY3QnLFxuICAnYnJlYWtwb2ludHMnLFxuICAnX3NwYWNlQmV0d2VlbicsXG4gICdfc2xpZGVzUGVyVmlldycsXG4gICdfc2xpZGVzUGVyQ29sdW1uJyxcbiAgJ19zbGlkZXNQZXJDb2x1bW5GaWxsJyxcbiAgJ19zbGlkZXNQZXJHcm91cCcsXG4gICdfc2xpZGVzUGVyR3JvdXBTa2lwJyxcbiAgJ19jZW50ZXJlZFNsaWRlcycsXG4gICdfY2VudGVyZWRTbGlkZXNCb3VuZHMnLFxuICAnX3NsaWRlc09mZnNldEJlZm9yZScsXG4gICdfc2xpZGVzT2Zmc2V0QWZ0ZXInLFxuICAnbm9ybWFsaXplU2xpZGVJbmRleCcsXG4gICdfY2VudGVySW5zdWZmaWNpZW50U2xpZGVzJyxcbiAgJ193YXRjaE92ZXJmbG93JyxcbiAgJ3JvdW5kTGVuZ3RocycsXG4gICd0b3VjaFJhdGlvJyxcbiAgJ3RvdWNoQW5nbGUnLFxuICAnc2ltdWxhdGVUb3VjaCcsXG4gICdfc2hvcnRTd2lwZXMnLFxuICAnX2xvbmdTd2lwZXMnLFxuICAnbG9uZ1N3aXBlc1JhdGlvJyxcbiAgJ2xvbmdTd2lwZXNNcycsXG4gICdfZm9sbG93RmluZ2VyJyxcbiAgJ2FsbG93VG91Y2hNb3ZlJyxcbiAgJ190aHJlc2hvbGQnLFxuICAndG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uJyxcbiAgJ3RvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCcsXG4gICd0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCcsXG4gICd0b3VjaFJlbGVhc2VPbkVkZ2VzJyxcbiAgJ3VuaXF1ZU5hdkVsZW1lbnRzJyxcbiAgJ19yZXNpc3RhbmNlJyxcbiAgJ19yZXNpc3RhbmNlUmF0aW8nLFxuICAnX3dhdGNoU2xpZGVzUHJvZ3Jlc3MnLFxuICAnX3dhdGNoU2xpZGVzVmlzaWJpbGl0eScsXG4gICdfZ3JhYkN1cnNvcicsXG4gICdwcmV2ZW50Q2xpY2tzJyxcbiAgJ3ByZXZlbnRDbGlja3NQcm9wYWdhdGlvbicsXG4gICdfc2xpZGVUb0NsaWNrZWRTbGlkZScsXG4gICdfcHJlbG9hZEltYWdlcycsXG4gICd1cGRhdGVPbkltYWdlc1JlYWR5JyxcbiAgJ19sb29wJyxcbiAgJ19sb29wQWRkaXRpb25hbFNsaWRlcycsXG4gICdfbG9vcGVkU2xpZGVzJyxcbiAgJ19sb29wRmlsbEdyb3VwV2l0aEJsYW5rJyxcbiAgJ2xvb3BQcmV2ZW50c1NsaWRlJyxcbiAgJ19hbGxvd1NsaWRlUHJldicsXG4gICdfYWxsb3dTbGlkZU5leHQnLFxuICAnX3N3aXBlSGFuZGxlcicsXG4gICdfbm9Td2lwaW5nJyxcbiAgJ25vU3dpcGluZ0NsYXNzJyxcbiAgJ25vU3dpcGluZ1NlbGVjdG9yJyxcbiAgJ3Bhc3NpdmVMaXN0ZW5lcnMnLFxuICAnY29udGFpbmVyTW9kaWZpZXJDbGFzcycsXG4gICdzbGlkZUNsYXNzJyxcbiAgJ3NsaWRlQmxhbmtDbGFzcycsXG4gICdzbGlkZUFjdGl2ZUNsYXNzJyxcbiAgJ3NsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MnLFxuICAnc2xpZGVWaXNpYmxlQ2xhc3MnLFxuICAnc2xpZGVEdXBsaWNhdGVDbGFzcycsXG4gICdzbGlkZU5leHRDbGFzcycsXG4gICdzbGlkZUR1cGxpY2F0ZU5leHRDbGFzcycsXG4gICdzbGlkZVByZXZDbGFzcycsXG4gICdzbGlkZUR1cGxpY2F0ZVByZXZDbGFzcycsXG4gICd3cmFwcGVyQ2xhc3MnLFxuICAncnVuQ2FsbGJhY2tzT25Jbml0JyxcblxuICAvLyBtb2R1bGVzXG4gICdhMTF5JyxcbiAgJ2F1dG9wbGF5JyxcbiAgJ19jb250cm9sbGVyJyxcbiAgJ2NvdmVyZmxvd0VmZmVjdCcsXG4gICdjdWJlRWZmZWN0JyxcbiAgJ2ZhZGVFZmZlY3QnLFxuICAnZmxpcEVmZmVjdCcsXG4gICdoYXNoTmF2aWdhdGlvbicsXG4gICdoaXN0b3J5JyxcbiAgJ2tleWJvYXJkJyxcbiAgJ2xhenknLFxuICAnbW91c2V3aGVlbCcsXG4gICdfbmF2aWdhdGlvbicsXG4gICdfcGFnaW5hdGlvbicsXG4gICdwYXJhbGxheCcsXG4gICdfc2Nyb2xsYmFyJyxcbiAgJ190aHVtYnMnLFxuICAndmlydHVhbCcsXG4gICd6b29tJyxcbl07XG4iXX0=